[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "check-spdx-header"
dynamic = ["version"]
description = "pre-commit hook to validate spdx license comments"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [{ name = "linuxdaemon", email = "linuxdaemon.irc@gmail.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["click==8.2.1", "tomli==2.2.1 ; python_version < '3.11'"]

[project.urls]
Documentation = "https://github.com/TotallyNotRobots/check-spdx-header#readme"
Issues = "https://github.com/TotallyNotRobots/check-spdx-header/issues"
Source = "https://github.com/TotallyNotRobots/check-spdx-header"

[project.scripts]
check-spdx-header = "check_spdx_header.cli:check_spdx_header"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/check_spdx_header/_version.py"

[tool.hatch.envs.default]
dependencies = ["pre-commit==4.1.0", "pytest==8.3.5"]

[tool.hatch.envs.hatch-test]
default-args = ["tests", "src"]
extra-args = ["-vv"]
[tool.hatch.envs.hatch-test.scripts]
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
cov-combine = "coverage combine"
cov-report = ["coverage report --show-missing --skip-covered", "coverage xml"]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.13", "3.12", "3.11", "3.10"]

[tool.hatch.envs.types]
extra-dependencies = ["mypy==1.18.2"]
[tool.hatch.envs.types.scripts]
check = "mypy {args:src/check_spdx_header tests}"

[tool.coverage.run]
source_pkgs = ["check_spdx_header", "tests"]
branch = true
# parallel = true
omit = ["src/check_spdx_header/_version.py"]

[tool.coverage.paths]
check_spdx_header = [
    "src/check_spdx_header",
    "*/check-spdx-header/src/check_spdx_header",
]
tests = ["tests", "*/check-spdx-header/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.nitpick]
style = ["gh://TotallyNotRobots/nitpick/app-style-3.10.toml"]

[tool.isort]
line_length = 80
profile = "black"
float_to_top = true

[tool.black]
line-length = 80
target-version = ["py310"]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
show_error_codes = true
warn_unused_ignores = true
warn_redundant_casts = true
extra_checks = true
strict = true
disallow_untyped_calls = true
disallow_untyped_defs = true
allow_redefinition = false

[tool.flynt]
transform-concats = true
transform-joins = true
line-length = 120
aggressive = true

[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "scm"
update_changelog_on_bump = true
major_version_zero = true

[tool.check-spdx-header]
headers = ["2024-present linuxdaemon <linuxdaemon.irc@gmail.com>"]

[tool.ruff]
line-length = 80
target-version = 'py310'

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"
skip-magic-trailing-comma = true

[tool.ruff.lint]
ignore-init-module-imports = false
extend-safe-fixes = [
    "TCH003",
    "EM101",
    "EM102",
    "EM103",
    "F401",
    "FLY002",
    "TCH001",
    "TCH002",
    "TRY400",
    "SIM117",
    "SIM108",
    "ANN201",
    "D415",
    "D200",
    "UP006",
    "UP007",
    "FA102",
]
extend-ignore = ["D"]
# select = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "S101", # Allow asserts in tests
]

[tool.ruff.lint.pycodestyle]
max-line-length = 100

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.autoflake]
remove-all-unused-imports = true
in-place = true
